//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18052.
// 
#pragma warning disable 1591

namespace WinCalUploadTest.TDBMainWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="tdb_wsv_authSoap", Namespace="http://www.thedrillbook.com/webserv/")]
    public partial class tdb_wsv_auth : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateCredsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateLoggedInUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GrabCoachGUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllAssistantCoachesForTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllTeamsForCoachOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllEventsForTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectTeamDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectUserCoachOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeamEventLocationSelectAllForTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeamEventLocationSelectSingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeamEventLocationInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeamEventLocationUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeamEventLocationSelectAllForTeamListOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeamOpponentSelectAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeamOpponentSelectSingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeamOpponentInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeamOpponentUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeamOpponentSelectAllForTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamAgeLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllEventsForTeamByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllEventsForTeamByTypeTodayForwardOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllEventsForTeamByDateForwardOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectSingleEventDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSingleEventInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback EventUpdateAttendingStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback AttendanceSetStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback AttendanceGetStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback EventGetPlayerAttendanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectUserPlayerOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectUserPlayerDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllPlayersForTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectPlayerDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllPlayersForTeamForListsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllPlayersForTeamForListsWithImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveNewPlayerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePlayerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePlayerMobileVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllTasksForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectTaskDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectUserCoachDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCoachMobileVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllCoachesTeamsForComboOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCoachActiveTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSingleEventDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllPracticeDrillsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllPracticeDrillsAsDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQuadrantsForPracticeBlockOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssistantCoachModNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectSingleDrillDetailsForIosOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllDrillsForAgeLevelMinOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDrillsForComboByCategoryAndIceTypeAndAgeLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDrillsForComboByCategoryAndAgeLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectUserManagerDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectUserManagerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateManagerMobileVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectUserAssistantCoachDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectUserAssistantCoachOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAssistantCoachMobileVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllDrillCategoriesDSOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public tdb_wsv_auth() {
            this.Url = global::WinCalUploadTest.Properties.Settings.Default.WinCalUploadTest_TDBMainWebService_tdb_wsv_auth;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event ValidateCredsCompletedEventHandler ValidateCredsCompleted;
        
        /// <remarks/>
        public event ValidateLoggedInUserCompletedEventHandler ValidateLoggedInUserCompleted;
        
        /// <remarks/>
        public event GrabCoachGUIDCompletedEventHandler GrabCoachGUIDCompleted;
        
        /// <remarks/>
        public event SelectAllAssistantCoachesForTeamCompletedEventHandler SelectAllAssistantCoachesForTeamCompleted;
        
        /// <remarks/>
        public event SelectAllTeamsForCoachCompletedEventHandler SelectAllTeamsForCoachCompleted;
        
        /// <remarks/>
        public event SelectAllEventsForTeamCompletedEventHandler SelectAllEventsForTeamCompleted;
        
        /// <remarks/>
        public event SelectTeamDetailCompletedEventHandler SelectTeamDetailCompleted;
        
        /// <remarks/>
        public event SelectUserCoachCompletedEventHandler SelectUserCoachCompleted;
        
        /// <remarks/>
        public event TeamEventLocationSelectAllForTeamCompletedEventHandler TeamEventLocationSelectAllForTeamCompleted;
        
        /// <remarks/>
        public event TeamEventLocationSelectSingleCompletedEventHandler TeamEventLocationSelectSingleCompleted;
        
        /// <remarks/>
        public event TeamEventLocationInsertCompletedEventHandler TeamEventLocationInsertCompleted;
        
        /// <remarks/>
        public event TeamEventLocationUpdateCompletedEventHandler TeamEventLocationUpdateCompleted;
        
        /// <remarks/>
        public event TeamEventLocationSelectAllForTeamListCompletedEventHandler TeamEventLocationSelectAllForTeamListCompleted;
        
        /// <remarks/>
        public event TeamOpponentSelectAllCompletedEventHandler TeamOpponentSelectAllCompleted;
        
        /// <remarks/>
        public event TeamOpponentSelectSingleCompletedEventHandler TeamOpponentSelectSingleCompleted;
        
        /// <remarks/>
        public event TeamOpponentInsertCompletedEventHandler TeamOpponentInsertCompleted;
        
        /// <remarks/>
        public event TeamOpponentUpdateCompletedEventHandler TeamOpponentUpdateCompleted;
        
        /// <remarks/>
        public event TeamOpponentSelectAllForTeamCompletedEventHandler TeamOpponentSelectAllForTeamCompleted;
        
        /// <remarks/>
        public event GetTeamAgeLevelCompletedEventHandler GetTeamAgeLevelCompleted;
        
        /// <remarks/>
        public event SelectAllEventsForTeamByTypeCompletedEventHandler SelectAllEventsForTeamByTypeCompleted;
        
        /// <remarks/>
        public event SelectAllEventsForTeamByTypeTodayForwardCompletedEventHandler SelectAllEventsForTeamByTypeTodayForwardCompleted;
        
        /// <remarks/>
        public event SelectAllEventsForTeamByDateForwardCompletedEventHandler SelectAllEventsForTeamByDateForwardCompleted;
        
        /// <remarks/>
        public event SelectSingleEventDetailCompletedEventHandler SelectSingleEventDetailCompleted;
        
        /// <remarks/>
        public event GetSingleEventInstanceCompletedEventHandler GetSingleEventInstanceCompleted;
        
        /// <remarks/>
        public event InsertEventCompletedEventHandler InsertEventCompleted;
        
        /// <remarks/>
        public event UpdateEventCompletedEventHandler UpdateEventCompleted;
        
        /// <remarks/>
        public event EventUpdateAttendingStatusCompletedEventHandler EventUpdateAttendingStatusCompleted;
        
        /// <remarks/>
        public event AttendanceSetStatusCompletedEventHandler AttendanceSetStatusCompleted;
        
        /// <remarks/>
        public event AttendanceGetStatusCompletedEventHandler AttendanceGetStatusCompleted;
        
        /// <remarks/>
        public event EventGetPlayerAttendanceCompletedEventHandler EventGetPlayerAttendanceCompleted;
        
        /// <remarks/>
        public event SelectUserPlayerCompletedEventHandler SelectUserPlayerCompleted;
        
        /// <remarks/>
        public event SelectUserPlayerDetailsCompletedEventHandler SelectUserPlayerDetailsCompleted;
        
        /// <remarks/>
        public event SelectAllPlayersForTeamCompletedEventHandler SelectAllPlayersForTeamCompleted;
        
        /// <remarks/>
        public event SelectPlayerDetailsCompletedEventHandler SelectPlayerDetailsCompleted;
        
        /// <remarks/>
        public event SelectAllPlayersForTeamForListsCompletedEventHandler SelectAllPlayersForTeamForListsCompleted;
        
        /// <remarks/>
        public event SelectAllPlayersForTeamForListsWithImageCompletedEventHandler SelectAllPlayersForTeamForListsWithImageCompleted;
        
        /// <remarks/>
        public event SaveNewPlayerCompletedEventHandler SaveNewPlayerCompleted;
        
        /// <remarks/>
        public event UpdatePlayerCompletedEventHandler UpdatePlayerCompleted;
        
        /// <remarks/>
        public event UpdatePlayerMobileVersionCompletedEventHandler UpdatePlayerMobileVersionCompleted;
        
        /// <remarks/>
        public event SelectAllTasksForUserCompletedEventHandler SelectAllTasksForUserCompleted;
        
        /// <remarks/>
        public event SelectTaskDetailsCompletedEventHandler SelectTaskDetailsCompleted;
        
        /// <remarks/>
        public event SaveTaskCompletedEventHandler SaveTaskCompleted;
        
        /// <remarks/>
        public event UpdateTaskCompletedEventHandler UpdateTaskCompleted;
        
        /// <remarks/>
        public event SelectUserCoachDetailsCompletedEventHandler SelectUserCoachDetailsCompleted;
        
        /// <remarks/>
        public event UpdateCoachMobileVersionCompletedEventHandler UpdateCoachMobileVersionCompleted;
        
        /// <remarks/>
        public event GetAllCoachesTeamsForComboCompletedEventHandler GetAllCoachesTeamsForComboCompleted;
        
        /// <remarks/>
        public event UpdateCoachActiveTeamCompletedEventHandler UpdateCoachActiveTeamCompleted;
        
        /// <remarks/>
        public event GetSingleEventDetailsCompletedEventHandler GetSingleEventDetailsCompleted;
        
        /// <remarks/>
        public event GetAllPracticeDrillsCompletedEventHandler GetAllPracticeDrillsCompleted;
        
        /// <remarks/>
        public event GetAllPracticeDrillsAsDsCompletedEventHandler GetAllPracticeDrillsAsDsCompleted;
        
        /// <remarks/>
        public event GetQuadrantsForPracticeBlockCompletedEventHandler GetQuadrantsForPracticeBlockCompleted;
        
        /// <remarks/>
        public event GetAssistantCoachModNameCompletedEventHandler GetAssistantCoachModNameCompleted;
        
        /// <remarks/>
        public event SelectSingleDrillDetailsForIosCompletedEventHandler SelectSingleDrillDetailsForIosCompleted;
        
        /// <remarks/>
        public event SelectAllDrillsForAgeLevelMinCompletedEventHandler SelectAllDrillsForAgeLevelMinCompleted;
        
        /// <remarks/>
        public event GetDrillsForComboByCategoryAndIceTypeAndAgeLevelCompletedEventHandler GetDrillsForComboByCategoryAndIceTypeAndAgeLevelCompleted;
        
        /// <remarks/>
        public event GetDrillsForComboByCategoryAndAgeLevelCompletedEventHandler GetDrillsForComboByCategoryAndAgeLevelCompleted;
        
        /// <remarks/>
        public event SelectUserManagerDetailsCompletedEventHandler SelectUserManagerDetailsCompleted;
        
        /// <remarks/>
        public event SelectUserManagerCompletedEventHandler SelectUserManagerCompleted;
        
        /// <remarks/>
        public event UpdateManagerMobileVersionCompletedEventHandler UpdateManagerMobileVersionCompleted;
        
        /// <remarks/>
        public event SelectUserAssistantCoachDetailsCompletedEventHandler SelectUserAssistantCoachDetailsCompleted;
        
        /// <remarks/>
        public event SelectUserAssistantCoachCompletedEventHandler SelectUserAssistantCoachCompleted;
        
        /// <remarks/>
        public event UpdateAssistantCoachMobileVersionCompletedEventHandler UpdateAssistantCoachMobileVersionCompleted;
        
        /// <remarks/>
        public event GetAllDrillCategoriesDSCompletedEventHandler GetAllDrillCategoriesDSCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/HelloWorld", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/ValidateCreds", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateCreds(string userName, string passWord) {
            object[] results = this.Invoke("ValidateCreds", new object[] {
                        userName,
                        passWord});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateCredsAsync(string userName, string passWord) {
            this.ValidateCredsAsync(userName, passWord, null);
        }
        
        /// <remarks/>
        public void ValidateCredsAsync(string userName, string passWord, object userState) {
            if ((this.ValidateCredsOperationCompleted == null)) {
                this.ValidateCredsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateCredsOperationCompleted);
            }
            this.InvokeAsync("ValidateCreds", new object[] {
                        userName,
                        passWord}, this.ValidateCredsOperationCompleted, userState);
        }
        
        private void OnValidateCredsOperationCompleted(object arg) {
            if ((this.ValidateCredsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCredsCompleted(this, new ValidateCredsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/ValidateLoggedInUser", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateLoggedInUser(string userName, string passWord) {
            object[] results = this.Invoke("ValidateLoggedInUser", new object[] {
                        userName,
                        passWord});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateLoggedInUserAsync(string userName, string passWord) {
            this.ValidateLoggedInUserAsync(userName, passWord, null);
        }
        
        /// <remarks/>
        public void ValidateLoggedInUserAsync(string userName, string passWord, object userState) {
            if ((this.ValidateLoggedInUserOperationCompleted == null)) {
                this.ValidateLoggedInUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateLoggedInUserOperationCompleted);
            }
            this.InvokeAsync("ValidateLoggedInUser", new object[] {
                        userName,
                        passWord}, this.ValidateLoggedInUserOperationCompleted, userState);
        }
        
        private void OnValidateLoggedInUserOperationCompleted(object arg) {
            if ((this.ValidateLoggedInUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateLoggedInUserCompleted(this, new ValidateLoggedInUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/GrabCoachGUID", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid GrabCoachGUID(string userName) {
            object[] results = this.Invoke("GrabCoachGUID", new object[] {
                        userName});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void GrabCoachGUIDAsync(string userName) {
            this.GrabCoachGUIDAsync(userName, null);
        }
        
        /// <remarks/>
        public void GrabCoachGUIDAsync(string userName, object userState) {
            if ((this.GrabCoachGUIDOperationCompleted == null)) {
                this.GrabCoachGUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGrabCoachGUIDOperationCompleted);
            }
            this.InvokeAsync("GrabCoachGUID", new object[] {
                        userName}, this.GrabCoachGUIDOperationCompleted, userState);
        }
        
        private void OnGrabCoachGUIDOperationCompleted(object arg) {
            if ((this.GrabCoachGUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GrabCoachGUIDCompleted(this, new GrabCoachGUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectAllAssistantCoachesForTeam", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectAllAssistantCoachesForTeam(int teamID) {
            object[] results = this.Invoke("SelectAllAssistantCoachesForTeam", new object[] {
                        teamID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllAssistantCoachesForTeamAsync(int teamID) {
            this.SelectAllAssistantCoachesForTeamAsync(teamID, null);
        }
        
        /// <remarks/>
        public void SelectAllAssistantCoachesForTeamAsync(int teamID, object userState) {
            if ((this.SelectAllAssistantCoachesForTeamOperationCompleted == null)) {
                this.SelectAllAssistantCoachesForTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllAssistantCoachesForTeamOperationCompleted);
            }
            this.InvokeAsync("SelectAllAssistantCoachesForTeam", new object[] {
                        teamID}, this.SelectAllAssistantCoachesForTeamOperationCompleted, userState);
        }
        
        private void OnSelectAllAssistantCoachesForTeamOperationCompleted(object arg) {
            if ((this.SelectAllAssistantCoachesForTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllAssistantCoachesForTeamCompleted(this, new SelectAllAssistantCoachesForTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectAllTeamsForCoach", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectAllTeamsForCoach(int coachID) {
            object[] results = this.Invoke("SelectAllTeamsForCoach", new object[] {
                        coachID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllTeamsForCoachAsync(int coachID) {
            this.SelectAllTeamsForCoachAsync(coachID, null);
        }
        
        /// <remarks/>
        public void SelectAllTeamsForCoachAsync(int coachID, object userState) {
            if ((this.SelectAllTeamsForCoachOperationCompleted == null)) {
                this.SelectAllTeamsForCoachOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllTeamsForCoachOperationCompleted);
            }
            this.InvokeAsync("SelectAllTeamsForCoach", new object[] {
                        coachID}, this.SelectAllTeamsForCoachOperationCompleted, userState);
        }
        
        private void OnSelectAllTeamsForCoachOperationCompleted(object arg) {
            if ((this.SelectAllTeamsForCoachCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllTeamsForCoachCompleted(this, new SelectAllTeamsForCoachCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectAllEventsForTeam", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectAllEventsForTeam(int teamID) {
            object[] results = this.Invoke("SelectAllEventsForTeam", new object[] {
                        teamID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllEventsForTeamAsync(int teamID) {
            this.SelectAllEventsForTeamAsync(teamID, null);
        }
        
        /// <remarks/>
        public void SelectAllEventsForTeamAsync(int teamID, object userState) {
            if ((this.SelectAllEventsForTeamOperationCompleted == null)) {
                this.SelectAllEventsForTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllEventsForTeamOperationCompleted);
            }
            this.InvokeAsync("SelectAllEventsForTeam", new object[] {
                        teamID}, this.SelectAllEventsForTeamOperationCompleted, userState);
        }
        
        private void OnSelectAllEventsForTeamOperationCompleted(object arg) {
            if ((this.SelectAllEventsForTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllEventsForTeamCompleted(this, new SelectAllEventsForTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectTeamDetail", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectTeamDetail(int teamID) {
            object[] results = this.Invoke("SelectTeamDetail", new object[] {
                        teamID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectTeamDetailAsync(int teamID) {
            this.SelectTeamDetailAsync(teamID, null);
        }
        
        /// <remarks/>
        public void SelectTeamDetailAsync(int teamID, object userState) {
            if ((this.SelectTeamDetailOperationCompleted == null)) {
                this.SelectTeamDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectTeamDetailOperationCompleted);
            }
            this.InvokeAsync("SelectTeamDetail", new object[] {
                        teamID}, this.SelectTeamDetailOperationCompleted, userState);
        }
        
        private void OnSelectTeamDetailOperationCompleted(object arg) {
            if ((this.SelectTeamDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectTeamDetailCompleted(this, new SelectTeamDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectUserCoach", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectUserCoach(string userName, string passWord) {
            object[] results = this.Invoke("SelectUserCoach", new object[] {
                        userName,
                        passWord});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectUserCoachAsync(string userName, string passWord) {
            this.SelectUserCoachAsync(userName, passWord, null);
        }
        
        /// <remarks/>
        public void SelectUserCoachAsync(string userName, string passWord, object userState) {
            if ((this.SelectUserCoachOperationCompleted == null)) {
                this.SelectUserCoachOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectUserCoachOperationCompleted);
            }
            this.InvokeAsync("SelectUserCoach", new object[] {
                        userName,
                        passWord}, this.SelectUserCoachOperationCompleted, userState);
        }
        
        private void OnSelectUserCoachOperationCompleted(object arg) {
            if ((this.SelectUserCoachCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectUserCoachCompleted(this, new SelectUserCoachCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/TeamEventLocationSelectAllForTeam", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TeamEventLocationSelectAllForTeam(int teamID) {
            object[] results = this.Invoke("TeamEventLocationSelectAllForTeam", new object[] {
                        teamID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TeamEventLocationSelectAllForTeamAsync(int teamID) {
            this.TeamEventLocationSelectAllForTeamAsync(teamID, null);
        }
        
        /// <remarks/>
        public void TeamEventLocationSelectAllForTeamAsync(int teamID, object userState) {
            if ((this.TeamEventLocationSelectAllForTeamOperationCompleted == null)) {
                this.TeamEventLocationSelectAllForTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeamEventLocationSelectAllForTeamOperationCompleted);
            }
            this.InvokeAsync("TeamEventLocationSelectAllForTeam", new object[] {
                        teamID}, this.TeamEventLocationSelectAllForTeamOperationCompleted, userState);
        }
        
        private void OnTeamEventLocationSelectAllForTeamOperationCompleted(object arg) {
            if ((this.TeamEventLocationSelectAllForTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeamEventLocationSelectAllForTeamCompleted(this, new TeamEventLocationSelectAllForTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/TeamEventLocationSelectSingle", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TeamEventLocationSelectSingle(int teamEventLocationID) {
            object[] results = this.Invoke("TeamEventLocationSelectSingle", new object[] {
                        teamEventLocationID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TeamEventLocationSelectSingleAsync(int teamEventLocationID) {
            this.TeamEventLocationSelectSingleAsync(teamEventLocationID, null);
        }
        
        /// <remarks/>
        public void TeamEventLocationSelectSingleAsync(int teamEventLocationID, object userState) {
            if ((this.TeamEventLocationSelectSingleOperationCompleted == null)) {
                this.TeamEventLocationSelectSingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeamEventLocationSelectSingleOperationCompleted);
            }
            this.InvokeAsync("TeamEventLocationSelectSingle", new object[] {
                        teamEventLocationID}, this.TeamEventLocationSelectSingleOperationCompleted, userState);
        }
        
        private void OnTeamEventLocationSelectSingleOperationCompleted(object arg) {
            if ((this.TeamEventLocationSelectSingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeamEventLocationSelectSingleCompleted(this, new TeamEventLocationSelectSingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/TeamEventLocationInsert", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TeamEventLocationInsert(string locationName, string address1, string address2, string city, string provState, string zipPostal, string phoneNumber1, string phoneNumber2, string notes, int status, int type, int teamID) {
            object[] results = this.Invoke("TeamEventLocationInsert", new object[] {
                        locationName,
                        address1,
                        address2,
                        city,
                        provState,
                        zipPostal,
                        phoneNumber1,
                        phoneNumber2,
                        notes,
                        status,
                        type,
                        teamID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TeamEventLocationInsertAsync(string locationName, string address1, string address2, string city, string provState, string zipPostal, string phoneNumber1, string phoneNumber2, string notes, int status, int type, int teamID) {
            this.TeamEventLocationInsertAsync(locationName, address1, address2, city, provState, zipPostal, phoneNumber1, phoneNumber2, notes, status, type, teamID, null);
        }
        
        /// <remarks/>
        public void TeamEventLocationInsertAsync(string locationName, string address1, string address2, string city, string provState, string zipPostal, string phoneNumber1, string phoneNumber2, string notes, int status, int type, int teamID, object userState) {
            if ((this.TeamEventLocationInsertOperationCompleted == null)) {
                this.TeamEventLocationInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeamEventLocationInsertOperationCompleted);
            }
            this.InvokeAsync("TeamEventLocationInsert", new object[] {
                        locationName,
                        address1,
                        address2,
                        city,
                        provState,
                        zipPostal,
                        phoneNumber1,
                        phoneNumber2,
                        notes,
                        status,
                        type,
                        teamID}, this.TeamEventLocationInsertOperationCompleted, userState);
        }
        
        private void OnTeamEventLocationInsertOperationCompleted(object arg) {
            if ((this.TeamEventLocationInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeamEventLocationInsertCompleted(this, new TeamEventLocationInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/TeamEventLocationUpdate", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TeamEventLocationUpdate(int teamEventLocationID, string locationName, string address1, string address2, string city, string provState, string zipPostal, string phoneNumber1, string phoneNumber2, string notes, int status, int type, int teamID) {
            object[] results = this.Invoke("TeamEventLocationUpdate", new object[] {
                        teamEventLocationID,
                        locationName,
                        address1,
                        address2,
                        city,
                        provState,
                        zipPostal,
                        phoneNumber1,
                        phoneNumber2,
                        notes,
                        status,
                        type,
                        teamID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TeamEventLocationUpdateAsync(int teamEventLocationID, string locationName, string address1, string address2, string city, string provState, string zipPostal, string phoneNumber1, string phoneNumber2, string notes, int status, int type, int teamID) {
            this.TeamEventLocationUpdateAsync(teamEventLocationID, locationName, address1, address2, city, provState, zipPostal, phoneNumber1, phoneNumber2, notes, status, type, teamID, null);
        }
        
        /// <remarks/>
        public void TeamEventLocationUpdateAsync(int teamEventLocationID, string locationName, string address1, string address2, string city, string provState, string zipPostal, string phoneNumber1, string phoneNumber2, string notes, int status, int type, int teamID, object userState) {
            if ((this.TeamEventLocationUpdateOperationCompleted == null)) {
                this.TeamEventLocationUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeamEventLocationUpdateOperationCompleted);
            }
            this.InvokeAsync("TeamEventLocationUpdate", new object[] {
                        teamEventLocationID,
                        locationName,
                        address1,
                        address2,
                        city,
                        provState,
                        zipPostal,
                        phoneNumber1,
                        phoneNumber2,
                        notes,
                        status,
                        type,
                        teamID}, this.TeamEventLocationUpdateOperationCompleted, userState);
        }
        
        private void OnTeamEventLocationUpdateOperationCompleted(object arg) {
            if ((this.TeamEventLocationUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeamEventLocationUpdateCompleted(this, new TeamEventLocationUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/TeamEventLocationSelectAllForTeamList", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TeamEventLocations[] TeamEventLocationSelectAllForTeamList(int teamID) {
            object[] results = this.Invoke("TeamEventLocationSelectAllForTeamList", new object[] {
                        teamID});
            return ((TeamEventLocations[])(results[0]));
        }
        
        /// <remarks/>
        public void TeamEventLocationSelectAllForTeamListAsync(int teamID) {
            this.TeamEventLocationSelectAllForTeamListAsync(teamID, null);
        }
        
        /// <remarks/>
        public void TeamEventLocationSelectAllForTeamListAsync(int teamID, object userState) {
            if ((this.TeamEventLocationSelectAllForTeamListOperationCompleted == null)) {
                this.TeamEventLocationSelectAllForTeamListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeamEventLocationSelectAllForTeamListOperationCompleted);
            }
            this.InvokeAsync("TeamEventLocationSelectAllForTeamList", new object[] {
                        teamID}, this.TeamEventLocationSelectAllForTeamListOperationCompleted, userState);
        }
        
        private void OnTeamEventLocationSelectAllForTeamListOperationCompleted(object arg) {
            if ((this.TeamEventLocationSelectAllForTeamListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeamEventLocationSelectAllForTeamListCompleted(this, new TeamEventLocationSelectAllForTeamListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/TeamOpponentSelectAll", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TeamOpponentSelectAll(int teamID) {
            object[] results = this.Invoke("TeamOpponentSelectAll", new object[] {
                        teamID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TeamOpponentSelectAllAsync(int teamID) {
            this.TeamOpponentSelectAllAsync(teamID, null);
        }
        
        /// <remarks/>
        public void TeamOpponentSelectAllAsync(int teamID, object userState) {
            if ((this.TeamOpponentSelectAllOperationCompleted == null)) {
                this.TeamOpponentSelectAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeamOpponentSelectAllOperationCompleted);
            }
            this.InvokeAsync("TeamOpponentSelectAll", new object[] {
                        teamID}, this.TeamOpponentSelectAllOperationCompleted, userState);
        }
        
        private void OnTeamOpponentSelectAllOperationCompleted(object arg) {
            if ((this.TeamOpponentSelectAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeamOpponentSelectAllCompleted(this, new TeamOpponentSelectAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/TeamOpponentSelectSingle", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TeamOpponentSelectSingle(int teamOpponentID) {
            object[] results = this.Invoke("TeamOpponentSelectSingle", new object[] {
                        teamOpponentID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TeamOpponentSelectSingleAsync(int teamOpponentID) {
            this.TeamOpponentSelectSingleAsync(teamOpponentID, null);
        }
        
        /// <remarks/>
        public void TeamOpponentSelectSingleAsync(int teamOpponentID, object userState) {
            if ((this.TeamOpponentSelectSingleOperationCompleted == null)) {
                this.TeamOpponentSelectSingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeamOpponentSelectSingleOperationCompleted);
            }
            this.InvokeAsync("TeamOpponentSelectSingle", new object[] {
                        teamOpponentID}, this.TeamOpponentSelectSingleOperationCompleted, userState);
        }
        
        private void OnTeamOpponentSelectSingleOperationCompleted(object arg) {
            if ((this.TeamOpponentSelectSingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeamOpponentSelectSingleCompleted(this, new TeamOpponentSelectSingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/TeamOpponentInsert", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TeamOpponentInsert(string opponentName, string notes, int status, int type, int teamID) {
            object[] results = this.Invoke("TeamOpponentInsert", new object[] {
                        opponentName,
                        notes,
                        status,
                        type,
                        teamID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TeamOpponentInsertAsync(string opponentName, string notes, int status, int type, int teamID) {
            this.TeamOpponentInsertAsync(opponentName, notes, status, type, teamID, null);
        }
        
        /// <remarks/>
        public void TeamOpponentInsertAsync(string opponentName, string notes, int status, int type, int teamID, object userState) {
            if ((this.TeamOpponentInsertOperationCompleted == null)) {
                this.TeamOpponentInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeamOpponentInsertOperationCompleted);
            }
            this.InvokeAsync("TeamOpponentInsert", new object[] {
                        opponentName,
                        notes,
                        status,
                        type,
                        teamID}, this.TeamOpponentInsertOperationCompleted, userState);
        }
        
        private void OnTeamOpponentInsertOperationCompleted(object arg) {
            if ((this.TeamOpponentInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeamOpponentInsertCompleted(this, new TeamOpponentInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/TeamOpponentUpdate", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TeamOpponentUpdate(int teamOpponentID, string opponentName, string notes, int status, int type, int teamID) {
            object[] results = this.Invoke("TeamOpponentUpdate", new object[] {
                        teamOpponentID,
                        opponentName,
                        notes,
                        status,
                        type,
                        teamID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TeamOpponentUpdateAsync(int teamOpponentID, string opponentName, string notes, int status, int type, int teamID) {
            this.TeamOpponentUpdateAsync(teamOpponentID, opponentName, notes, status, type, teamID, null);
        }
        
        /// <remarks/>
        public void TeamOpponentUpdateAsync(int teamOpponentID, string opponentName, string notes, int status, int type, int teamID, object userState) {
            if ((this.TeamOpponentUpdateOperationCompleted == null)) {
                this.TeamOpponentUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeamOpponentUpdateOperationCompleted);
            }
            this.InvokeAsync("TeamOpponentUpdate", new object[] {
                        teamOpponentID,
                        opponentName,
                        notes,
                        status,
                        type,
                        teamID}, this.TeamOpponentUpdateOperationCompleted, userState);
        }
        
        private void OnTeamOpponentUpdateOperationCompleted(object arg) {
            if ((this.TeamOpponentUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeamOpponentUpdateCompleted(this, new TeamOpponentUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/TeamOpponentSelectAllForTeam", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TeamOpponents[] TeamOpponentSelectAllForTeam(int teamID) {
            object[] results = this.Invoke("TeamOpponentSelectAllForTeam", new object[] {
                        teamID});
            return ((TeamOpponents[])(results[0]));
        }
        
        /// <remarks/>
        public void TeamOpponentSelectAllForTeamAsync(int teamID) {
            this.TeamOpponentSelectAllForTeamAsync(teamID, null);
        }
        
        /// <remarks/>
        public void TeamOpponentSelectAllForTeamAsync(int teamID, object userState) {
            if ((this.TeamOpponentSelectAllForTeamOperationCompleted == null)) {
                this.TeamOpponentSelectAllForTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeamOpponentSelectAllForTeamOperationCompleted);
            }
            this.InvokeAsync("TeamOpponentSelectAllForTeam", new object[] {
                        teamID}, this.TeamOpponentSelectAllForTeamOperationCompleted, userState);
        }
        
        private void OnTeamOpponentSelectAllForTeamOperationCompleted(object arg) {
            if ((this.TeamOpponentSelectAllForTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeamOpponentSelectAllForTeamCompleted(this, new TeamOpponentSelectAllForTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/GetTeamAgeLevel", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTeamAgeLevel(int teamID) {
            object[] results = this.Invoke("GetTeamAgeLevel", new object[] {
                        teamID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamAgeLevelAsync(int teamID) {
            this.GetTeamAgeLevelAsync(teamID, null);
        }
        
        /// <remarks/>
        public void GetTeamAgeLevelAsync(int teamID, object userState) {
            if ((this.GetTeamAgeLevelOperationCompleted == null)) {
                this.GetTeamAgeLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamAgeLevelOperationCompleted);
            }
            this.InvokeAsync("GetTeamAgeLevel", new object[] {
                        teamID}, this.GetTeamAgeLevelOperationCompleted, userState);
        }
        
        private void OnGetTeamAgeLevelOperationCompleted(object arg) {
            if ((this.GetTeamAgeLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamAgeLevelCompleted(this, new GetTeamAgeLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectAllEventsForTeamByType", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectAllEventsForTeamByType(int teamID, string typeEvent) {
            object[] results = this.Invoke("SelectAllEventsForTeamByType", new object[] {
                        teamID,
                        typeEvent});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllEventsForTeamByTypeAsync(int teamID, string typeEvent) {
            this.SelectAllEventsForTeamByTypeAsync(teamID, typeEvent, null);
        }
        
        /// <remarks/>
        public void SelectAllEventsForTeamByTypeAsync(int teamID, string typeEvent, object userState) {
            if ((this.SelectAllEventsForTeamByTypeOperationCompleted == null)) {
                this.SelectAllEventsForTeamByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllEventsForTeamByTypeOperationCompleted);
            }
            this.InvokeAsync("SelectAllEventsForTeamByType", new object[] {
                        teamID,
                        typeEvent}, this.SelectAllEventsForTeamByTypeOperationCompleted, userState);
        }
        
        private void OnSelectAllEventsForTeamByTypeOperationCompleted(object arg) {
            if ((this.SelectAllEventsForTeamByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllEventsForTeamByTypeCompleted(this, new SelectAllEventsForTeamByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectAllEventsForTeamByTypeTodayForward", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectAllEventsForTeamByTypeTodayForward(int teamID, string typeEvent, System.DateTime todaysDate) {
            object[] results = this.Invoke("SelectAllEventsForTeamByTypeTodayForward", new object[] {
                        teamID,
                        typeEvent,
                        todaysDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllEventsForTeamByTypeTodayForwardAsync(int teamID, string typeEvent, System.DateTime todaysDate) {
            this.SelectAllEventsForTeamByTypeTodayForwardAsync(teamID, typeEvent, todaysDate, null);
        }
        
        /// <remarks/>
        public void SelectAllEventsForTeamByTypeTodayForwardAsync(int teamID, string typeEvent, System.DateTime todaysDate, object userState) {
            if ((this.SelectAllEventsForTeamByTypeTodayForwardOperationCompleted == null)) {
                this.SelectAllEventsForTeamByTypeTodayForwardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllEventsForTeamByTypeTodayForwardOperationCompleted);
            }
            this.InvokeAsync("SelectAllEventsForTeamByTypeTodayForward", new object[] {
                        teamID,
                        typeEvent,
                        todaysDate}, this.SelectAllEventsForTeamByTypeTodayForwardOperationCompleted, userState);
        }
        
        private void OnSelectAllEventsForTeamByTypeTodayForwardOperationCompleted(object arg) {
            if ((this.SelectAllEventsForTeamByTypeTodayForwardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllEventsForTeamByTypeTodayForwardCompleted(this, new SelectAllEventsForTeamByTypeTodayForwardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectAllEventsForTeamByDateForward", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectAllEventsForTeamByDateForward(int teamID, System.DateTime date) {
            object[] results = this.Invoke("SelectAllEventsForTeamByDateForward", new object[] {
                        teamID,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllEventsForTeamByDateForwardAsync(int teamID, System.DateTime date) {
            this.SelectAllEventsForTeamByDateForwardAsync(teamID, date, null);
        }
        
        /// <remarks/>
        public void SelectAllEventsForTeamByDateForwardAsync(int teamID, System.DateTime date, object userState) {
            if ((this.SelectAllEventsForTeamByDateForwardOperationCompleted == null)) {
                this.SelectAllEventsForTeamByDateForwardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllEventsForTeamByDateForwardOperationCompleted);
            }
            this.InvokeAsync("SelectAllEventsForTeamByDateForward", new object[] {
                        teamID,
                        date}, this.SelectAllEventsForTeamByDateForwardOperationCompleted, userState);
        }
        
        private void OnSelectAllEventsForTeamByDateForwardOperationCompleted(object arg) {
            if ((this.SelectAllEventsForTeamByDateForwardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllEventsForTeamByDateForwardCompleted(this, new SelectAllEventsForTeamByDateForwardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectSingleEventDetail", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectSingleEventDetail(int id) {
            object[] results = this.Invoke("SelectSingleEventDetail", new object[] {
                        id});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectSingleEventDetailAsync(int id) {
            this.SelectSingleEventDetailAsync(id, null);
        }
        
        /// <remarks/>
        public void SelectSingleEventDetailAsync(int id, object userState) {
            if ((this.SelectSingleEventDetailOperationCompleted == null)) {
                this.SelectSingleEventDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectSingleEventDetailOperationCompleted);
            }
            this.InvokeAsync("SelectSingleEventDetail", new object[] {
                        id}, this.SelectSingleEventDetailOperationCompleted, userState);
        }
        
        private void OnSelectSingleEventDetailOperationCompleted(object arg) {
            if ((this.SelectSingleEventDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectSingleEventDetailCompleted(this, new SelectSingleEventDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/GetSingleEventInstance", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TeamEvent GetSingleEventInstance(int id) {
            object[] results = this.Invoke("GetSingleEventInstance", new object[] {
                        id});
            return ((TeamEvent)(results[0]));
        }
        
        /// <remarks/>
        public void GetSingleEventInstanceAsync(int id) {
            this.GetSingleEventInstanceAsync(id, null);
        }
        
        /// <remarks/>
        public void GetSingleEventInstanceAsync(int id, object userState) {
            if ((this.GetSingleEventInstanceOperationCompleted == null)) {
                this.GetSingleEventInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSingleEventInstanceOperationCompleted);
            }
            this.InvokeAsync("GetSingleEventInstance", new object[] {
                        id}, this.GetSingleEventInstanceOperationCompleted, userState);
        }
        
        private void OnGetSingleEventInstanceOperationCompleted(object arg) {
            if ((this.GetSingleEventInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSingleEventInstanceCompleted(this, new GetSingleEventInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/InsertEvent", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertEvent(string text, System.DateTime startDate, System.DateTime endDate, int teamID, string eventType, int duration, string location, string address, int status, string notes, int type, string favoriteText, int teamOpponentID, int teamEventLocationID) {
            object[] results = this.Invoke("InsertEvent", new object[] {
                        text,
                        startDate,
                        endDate,
                        teamID,
                        eventType,
                        duration,
                        location,
                        address,
                        status,
                        notes,
                        type,
                        favoriteText,
                        teamOpponentID,
                        teamEventLocationID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertEventAsync(string text, System.DateTime startDate, System.DateTime endDate, int teamID, string eventType, int duration, string location, string address, int status, string notes, int type, string favoriteText, int teamOpponentID, int teamEventLocationID) {
            this.InsertEventAsync(text, startDate, endDate, teamID, eventType, duration, location, address, status, notes, type, favoriteText, teamOpponentID, teamEventLocationID, null);
        }
        
        /// <remarks/>
        public void InsertEventAsync(string text, System.DateTime startDate, System.DateTime endDate, int teamID, string eventType, int duration, string location, string address, int status, string notes, int type, string favoriteText, int teamOpponentID, int teamEventLocationID, object userState) {
            if ((this.InsertEventOperationCompleted == null)) {
                this.InsertEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertEventOperationCompleted);
            }
            this.InvokeAsync("InsertEvent", new object[] {
                        text,
                        startDate,
                        endDate,
                        teamID,
                        eventType,
                        duration,
                        location,
                        address,
                        status,
                        notes,
                        type,
                        favoriteText,
                        teamOpponentID,
                        teamEventLocationID}, this.InsertEventOperationCompleted, userState);
        }
        
        private void OnInsertEventOperationCompleted(object arg) {
            if ((this.InsertEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertEventCompleted(this, new InsertEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/UpdateEvent", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateEvent(int id, string text, System.DateTime startDate, System.DateTime endDate, int teamID, string eventType, int duration, string location, string address, int status, string notes, int type, string favoriteText, int teamOpponentID, int teamEventLocationID) {
            object[] results = this.Invoke("UpdateEvent", new object[] {
                        id,
                        text,
                        startDate,
                        endDate,
                        teamID,
                        eventType,
                        duration,
                        location,
                        address,
                        status,
                        notes,
                        type,
                        favoriteText,
                        teamOpponentID,
                        teamEventLocationID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEventAsync(int id, string text, System.DateTime startDate, System.DateTime endDate, int teamID, string eventType, int duration, string location, string address, int status, string notes, int type, string favoriteText, int teamOpponentID, int teamEventLocationID) {
            this.UpdateEventAsync(id, text, startDate, endDate, teamID, eventType, duration, location, address, status, notes, type, favoriteText, teamOpponentID, teamEventLocationID, null);
        }
        
        /// <remarks/>
        public void UpdateEventAsync(
                    int id, 
                    string text, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int teamID, 
                    string eventType, 
                    int duration, 
                    string location, 
                    string address, 
                    int status, 
                    string notes, 
                    int type, 
                    string favoriteText, 
                    int teamOpponentID, 
                    int teamEventLocationID, 
                    object userState) {
            if ((this.UpdateEventOperationCompleted == null)) {
                this.UpdateEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEventOperationCompleted);
            }
            this.InvokeAsync("UpdateEvent", new object[] {
                        id,
                        text,
                        startDate,
                        endDate,
                        teamID,
                        eventType,
                        duration,
                        location,
                        address,
                        status,
                        notes,
                        type,
                        favoriteText,
                        teamOpponentID,
                        teamEventLocationID}, this.UpdateEventOperationCompleted, userState);
        }
        
        private void OnUpdateEventOperationCompleted(object arg) {
            if ((this.UpdateEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEventCompleted(this, new UpdateEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/EventUpdateAttendingStatus", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EventUpdateAttendingStatus(int id, int playerID, int teamID, string attending) {
            object[] results = this.Invoke("EventUpdateAttendingStatus", new object[] {
                        id,
                        playerID,
                        teamID,
                        attending});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EventUpdateAttendingStatusAsync(int id, int playerID, int teamID, string attending) {
            this.EventUpdateAttendingStatusAsync(id, playerID, teamID, attending, null);
        }
        
        /// <remarks/>
        public void EventUpdateAttendingStatusAsync(int id, int playerID, int teamID, string attending, object userState) {
            if ((this.EventUpdateAttendingStatusOperationCompleted == null)) {
                this.EventUpdateAttendingStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEventUpdateAttendingStatusOperationCompleted);
            }
            this.InvokeAsync("EventUpdateAttendingStatus", new object[] {
                        id,
                        playerID,
                        teamID,
                        attending}, this.EventUpdateAttendingStatusOperationCompleted, userState);
        }
        
        private void OnEventUpdateAttendingStatusOperationCompleted(object arg) {
            if ((this.EventUpdateAttendingStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EventUpdateAttendingStatusCompleted(this, new EventUpdateAttendingStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/AttendanceSetStatus", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AttendanceSetStatus(int type, int attending, int eventID, int teamID, int userID) {
            object[] results = this.Invoke("AttendanceSetStatus", new object[] {
                        type,
                        attending,
                        eventID,
                        teamID,
                        userID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AttendanceSetStatusAsync(int type, int attending, int eventID, int teamID, int userID) {
            this.AttendanceSetStatusAsync(type, attending, eventID, teamID, userID, null);
        }
        
        /// <remarks/>
        public void AttendanceSetStatusAsync(int type, int attending, int eventID, int teamID, int userID, object userState) {
            if ((this.AttendanceSetStatusOperationCompleted == null)) {
                this.AttendanceSetStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttendanceSetStatusOperationCompleted);
            }
            this.InvokeAsync("AttendanceSetStatus", new object[] {
                        type,
                        attending,
                        eventID,
                        teamID,
                        userID}, this.AttendanceSetStatusOperationCompleted, userState);
        }
        
        private void OnAttendanceSetStatusOperationCompleted(object arg) {
            if ((this.AttendanceSetStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttendanceSetStatusCompleted(this, new AttendanceSetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/AttendanceGetStatus", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AttendanceGetStatus(int type, int eventID, int userID) {
            object[] results = this.Invoke("AttendanceGetStatus", new object[] {
                        type,
                        eventID,
                        userID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AttendanceGetStatusAsync(int type, int eventID, int userID) {
            this.AttendanceGetStatusAsync(type, eventID, userID, null);
        }
        
        /// <remarks/>
        public void AttendanceGetStatusAsync(int type, int eventID, int userID, object userState) {
            if ((this.AttendanceGetStatusOperationCompleted == null)) {
                this.AttendanceGetStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttendanceGetStatusOperationCompleted);
            }
            this.InvokeAsync("AttendanceGetStatus", new object[] {
                        type,
                        eventID,
                        userID}, this.AttendanceGetStatusOperationCompleted, userState);
        }
        
        private void OnAttendanceGetStatusOperationCompleted(object arg) {
            if ((this.AttendanceGetStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttendanceGetStatusCompleted(this, new AttendanceGetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/EventGetPlayerAttendance", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet EventGetPlayerAttendance(int eventID) {
            object[] results = this.Invoke("EventGetPlayerAttendance", new object[] {
                        eventID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void EventGetPlayerAttendanceAsync(int eventID) {
            this.EventGetPlayerAttendanceAsync(eventID, null);
        }
        
        /// <remarks/>
        public void EventGetPlayerAttendanceAsync(int eventID, object userState) {
            if ((this.EventGetPlayerAttendanceOperationCompleted == null)) {
                this.EventGetPlayerAttendanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEventGetPlayerAttendanceOperationCompleted);
            }
            this.InvokeAsync("EventGetPlayerAttendance", new object[] {
                        eventID}, this.EventGetPlayerAttendanceOperationCompleted, userState);
        }
        
        private void OnEventGetPlayerAttendanceOperationCompleted(object arg) {
            if ((this.EventGetPlayerAttendanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EventGetPlayerAttendanceCompleted(this, new EventGetPlayerAttendanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectUserPlayer", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectUserPlayer(string userName, string passWord) {
            object[] results = this.Invoke("SelectUserPlayer", new object[] {
                        userName,
                        passWord});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectUserPlayerAsync(string userName, string passWord) {
            this.SelectUserPlayerAsync(userName, passWord, null);
        }
        
        /// <remarks/>
        public void SelectUserPlayerAsync(string userName, string passWord, object userState) {
            if ((this.SelectUserPlayerOperationCompleted == null)) {
                this.SelectUserPlayerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectUserPlayerOperationCompleted);
            }
            this.InvokeAsync("SelectUserPlayer", new object[] {
                        userName,
                        passWord}, this.SelectUserPlayerOperationCompleted, userState);
        }
        
        private void OnSelectUserPlayerOperationCompleted(object arg) {
            if ((this.SelectUserPlayerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectUserPlayerCompleted(this, new SelectUserPlayerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectUserPlayerDetails", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectUserPlayerDetails(int playerID) {
            object[] results = this.Invoke("SelectUserPlayerDetails", new object[] {
                        playerID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectUserPlayerDetailsAsync(int playerID) {
            this.SelectUserPlayerDetailsAsync(playerID, null);
        }
        
        /// <remarks/>
        public void SelectUserPlayerDetailsAsync(int playerID, object userState) {
            if ((this.SelectUserPlayerDetailsOperationCompleted == null)) {
                this.SelectUserPlayerDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectUserPlayerDetailsOperationCompleted);
            }
            this.InvokeAsync("SelectUserPlayerDetails", new object[] {
                        playerID}, this.SelectUserPlayerDetailsOperationCompleted, userState);
        }
        
        private void OnSelectUserPlayerDetailsOperationCompleted(object arg) {
            if ((this.SelectUserPlayerDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectUserPlayerDetailsCompleted(this, new SelectUserPlayerDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectAllPlayersForTeam", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectAllPlayersForTeam(int teamID) {
            object[] results = this.Invoke("SelectAllPlayersForTeam", new object[] {
                        teamID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllPlayersForTeamAsync(int teamID) {
            this.SelectAllPlayersForTeamAsync(teamID, null);
        }
        
        /// <remarks/>
        public void SelectAllPlayersForTeamAsync(int teamID, object userState) {
            if ((this.SelectAllPlayersForTeamOperationCompleted == null)) {
                this.SelectAllPlayersForTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllPlayersForTeamOperationCompleted);
            }
            this.InvokeAsync("SelectAllPlayersForTeam", new object[] {
                        teamID}, this.SelectAllPlayersForTeamOperationCompleted, userState);
        }
        
        private void OnSelectAllPlayersForTeamOperationCompleted(object arg) {
            if ((this.SelectAllPlayersForTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllPlayersForTeamCompleted(this, new SelectAllPlayersForTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectPlayerDetails", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectPlayerDetails(int playerID) {
            object[] results = this.Invoke("SelectPlayerDetails", new object[] {
                        playerID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectPlayerDetailsAsync(int playerID) {
            this.SelectPlayerDetailsAsync(playerID, null);
        }
        
        /// <remarks/>
        public void SelectPlayerDetailsAsync(int playerID, object userState) {
            if ((this.SelectPlayerDetailsOperationCompleted == null)) {
                this.SelectPlayerDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectPlayerDetailsOperationCompleted);
            }
            this.InvokeAsync("SelectPlayerDetails", new object[] {
                        playerID}, this.SelectPlayerDetailsOperationCompleted, userState);
        }
        
        private void OnSelectPlayerDetailsOperationCompleted(object arg) {
            if ((this.SelectPlayerDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectPlayerDetailsCompleted(this, new SelectPlayerDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectAllPlayersForTeamForLists", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectAllPlayersForTeamForLists(int teamID) {
            object[] results = this.Invoke("SelectAllPlayersForTeamForLists", new object[] {
                        teamID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllPlayersForTeamForListsAsync(int teamID) {
            this.SelectAllPlayersForTeamForListsAsync(teamID, null);
        }
        
        /// <remarks/>
        public void SelectAllPlayersForTeamForListsAsync(int teamID, object userState) {
            if ((this.SelectAllPlayersForTeamForListsOperationCompleted == null)) {
                this.SelectAllPlayersForTeamForListsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllPlayersForTeamForListsOperationCompleted);
            }
            this.InvokeAsync("SelectAllPlayersForTeamForLists", new object[] {
                        teamID}, this.SelectAllPlayersForTeamForListsOperationCompleted, userState);
        }
        
        private void OnSelectAllPlayersForTeamForListsOperationCompleted(object arg) {
            if ((this.SelectAllPlayersForTeamForListsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllPlayersForTeamForListsCompleted(this, new SelectAllPlayersForTeamForListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectAllPlayersForTeamForListsWithImage", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectAllPlayersForTeamForListsWithImage(int teamID) {
            object[] results = this.Invoke("SelectAllPlayersForTeamForListsWithImage", new object[] {
                        teamID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllPlayersForTeamForListsWithImageAsync(int teamID) {
            this.SelectAllPlayersForTeamForListsWithImageAsync(teamID, null);
        }
        
        /// <remarks/>
        public void SelectAllPlayersForTeamForListsWithImageAsync(int teamID, object userState) {
            if ((this.SelectAllPlayersForTeamForListsWithImageOperationCompleted == null)) {
                this.SelectAllPlayersForTeamForListsWithImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllPlayersForTeamForListsWithImageOperationCompleted);
            }
            this.InvokeAsync("SelectAllPlayersForTeamForListsWithImage", new object[] {
                        teamID}, this.SelectAllPlayersForTeamForListsWithImageOperationCompleted, userState);
        }
        
        private void OnSelectAllPlayersForTeamForListsWithImageOperationCompleted(object arg) {
            if ((this.SelectAllPlayersForTeamForListsWithImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllPlayersForTeamForListsWithImageCompleted(this, new SelectAllPlayersForTeamForListsWithImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SaveNewPlayer", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveNewPlayer(int teamID, string firstName, string lastName, string dateOfBirth, int jerseyNumber, string position, string email1, string phone1, string address, string address2, string primaryCity, string provincestate, string primaryZipPostalCode, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] img) {
            object[] results = this.Invoke("SaveNewPlayer", new object[] {
                        teamID,
                        firstName,
                        lastName,
                        dateOfBirth,
                        jerseyNumber,
                        position,
                        email1,
                        phone1,
                        address,
                        address2,
                        primaryCity,
                        provincestate,
                        primaryZipPostalCode,
                        img});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveNewPlayerAsync(int teamID, string firstName, string lastName, string dateOfBirth, int jerseyNumber, string position, string email1, string phone1, string address, string address2, string primaryCity, string provincestate, string primaryZipPostalCode, byte[] img) {
            this.SaveNewPlayerAsync(teamID, firstName, lastName, dateOfBirth, jerseyNumber, position, email1, phone1, address, address2, primaryCity, provincestate, primaryZipPostalCode, img, null);
        }
        
        /// <remarks/>
        public void SaveNewPlayerAsync(int teamID, string firstName, string lastName, string dateOfBirth, int jerseyNumber, string position, string email1, string phone1, string address, string address2, string primaryCity, string provincestate, string primaryZipPostalCode, byte[] img, object userState) {
            if ((this.SaveNewPlayerOperationCompleted == null)) {
                this.SaveNewPlayerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNewPlayerOperationCompleted);
            }
            this.InvokeAsync("SaveNewPlayer", new object[] {
                        teamID,
                        firstName,
                        lastName,
                        dateOfBirth,
                        jerseyNumber,
                        position,
                        email1,
                        phone1,
                        address,
                        address2,
                        primaryCity,
                        provincestate,
                        primaryZipPostalCode,
                        img}, this.SaveNewPlayerOperationCompleted, userState);
        }
        
        private void OnSaveNewPlayerOperationCompleted(object arg) {
            if ((this.SaveNewPlayerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNewPlayerCompleted(this, new SaveNewPlayerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/UpdatePlayer", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePlayer(
                    int playerID, 
                    int teamID, 
                    string firstName, 
                    string lastName, 
                    string dateOfBirth, 
                    int jerseyNumber, 
                    string position, 
                    string email1, 
                    string phone1, 
                    string address, 
                    string address2, 
                    string primaryCity, 
                    string provincestate, 
                    string primaryZipPostalCode, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] img, 
                    System.Guid guid) {
            object[] results = this.Invoke("UpdatePlayer", new object[] {
                        playerID,
                        teamID,
                        firstName,
                        lastName,
                        dateOfBirth,
                        jerseyNumber,
                        position,
                        email1,
                        phone1,
                        address,
                        address2,
                        primaryCity,
                        provincestate,
                        primaryZipPostalCode,
                        img,
                        guid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePlayerAsync(
                    int playerID, 
                    int teamID, 
                    string firstName, 
                    string lastName, 
                    string dateOfBirth, 
                    int jerseyNumber, 
                    string position, 
                    string email1, 
                    string phone1, 
                    string address, 
                    string address2, 
                    string primaryCity, 
                    string provincestate, 
                    string primaryZipPostalCode, 
                    byte[] img, 
                    System.Guid guid) {
            this.UpdatePlayerAsync(playerID, teamID, firstName, lastName, dateOfBirth, jerseyNumber, position, email1, phone1, address, address2, primaryCity, provincestate, primaryZipPostalCode, img, guid, null);
        }
        
        /// <remarks/>
        public void UpdatePlayerAsync(
                    int playerID, 
                    int teamID, 
                    string firstName, 
                    string lastName, 
                    string dateOfBirth, 
                    int jerseyNumber, 
                    string position, 
                    string email1, 
                    string phone1, 
                    string address, 
                    string address2, 
                    string primaryCity, 
                    string provincestate, 
                    string primaryZipPostalCode, 
                    byte[] img, 
                    System.Guid guid, 
                    object userState) {
            if ((this.UpdatePlayerOperationCompleted == null)) {
                this.UpdatePlayerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePlayerOperationCompleted);
            }
            this.InvokeAsync("UpdatePlayer", new object[] {
                        playerID,
                        teamID,
                        firstName,
                        lastName,
                        dateOfBirth,
                        jerseyNumber,
                        position,
                        email1,
                        phone1,
                        address,
                        address2,
                        primaryCity,
                        provincestate,
                        primaryZipPostalCode,
                        img,
                        guid}, this.UpdatePlayerOperationCompleted, userState);
        }
        
        private void OnUpdatePlayerOperationCompleted(object arg) {
            if ((this.UpdatePlayerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePlayerCompleted(this, new UpdatePlayerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/UpdatePlayerMobileVersion", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePlayerMobileVersion(int playerID, int teamID, string firstName, string lastName, string gender, string dateOfBirth, int jerseyNumber, string position, string email1, string phone1, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] img, System.Guid guid) {
            object[] results = this.Invoke("UpdatePlayerMobileVersion", new object[] {
                        playerID,
                        teamID,
                        firstName,
                        lastName,
                        gender,
                        dateOfBirth,
                        jerseyNumber,
                        position,
                        email1,
                        phone1,
                        img,
                        guid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePlayerMobileVersionAsync(int playerID, int teamID, string firstName, string lastName, string gender, string dateOfBirth, int jerseyNumber, string position, string email1, string phone1, byte[] img, System.Guid guid) {
            this.UpdatePlayerMobileVersionAsync(playerID, teamID, firstName, lastName, gender, dateOfBirth, jerseyNumber, position, email1, phone1, img, guid, null);
        }
        
        /// <remarks/>
        public void UpdatePlayerMobileVersionAsync(int playerID, int teamID, string firstName, string lastName, string gender, string dateOfBirth, int jerseyNumber, string position, string email1, string phone1, byte[] img, System.Guid guid, object userState) {
            if ((this.UpdatePlayerMobileVersionOperationCompleted == null)) {
                this.UpdatePlayerMobileVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePlayerMobileVersionOperationCompleted);
            }
            this.InvokeAsync("UpdatePlayerMobileVersion", new object[] {
                        playerID,
                        teamID,
                        firstName,
                        lastName,
                        gender,
                        dateOfBirth,
                        jerseyNumber,
                        position,
                        email1,
                        phone1,
                        img,
                        guid}, this.UpdatePlayerMobileVersionOperationCompleted, userState);
        }
        
        private void OnUpdatePlayerMobileVersionOperationCompleted(object arg) {
            if ((this.UpdatePlayerMobileVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePlayerMobileVersionCompleted(this, new UpdatePlayerMobileVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectAllTasksForUser", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectAllTasksForUser(System.Guid userID) {
            object[] results = this.Invoke("SelectAllTasksForUser", new object[] {
                        userID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllTasksForUserAsync(System.Guid userID) {
            this.SelectAllTasksForUserAsync(userID, null);
        }
        
        /// <remarks/>
        public void SelectAllTasksForUserAsync(System.Guid userID, object userState) {
            if ((this.SelectAllTasksForUserOperationCompleted == null)) {
                this.SelectAllTasksForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllTasksForUserOperationCompleted);
            }
            this.InvokeAsync("SelectAllTasksForUser", new object[] {
                        userID}, this.SelectAllTasksForUserOperationCompleted, userState);
        }
        
        private void OnSelectAllTasksForUserOperationCompleted(object arg) {
            if ((this.SelectAllTasksForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllTasksForUserCompleted(this, new SelectAllTasksForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectTaskDetails", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectTaskDetails(int taskID) {
            object[] results = this.Invoke("SelectTaskDetails", new object[] {
                        taskID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectTaskDetailsAsync(int taskID) {
            this.SelectTaskDetailsAsync(taskID, null);
        }
        
        /// <remarks/>
        public void SelectTaskDetailsAsync(int taskID, object userState) {
            if ((this.SelectTaskDetailsOperationCompleted == null)) {
                this.SelectTaskDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectTaskDetailsOperationCompleted);
            }
            this.InvokeAsync("SelectTaskDetails", new object[] {
                        taskID}, this.SelectTaskDetailsOperationCompleted, userState);
        }
        
        private void OnSelectTaskDetailsOperationCompleted(object arg) {
            if ((this.SelectTaskDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectTaskDetailsCompleted(this, new SelectTaskDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SaveTask", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveTask(string task, string taskDescription, System.Guid userId, int status) {
            object[] results = this.Invoke("SaveTask", new object[] {
                        task,
                        taskDescription,
                        userId,
                        status});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveTaskAsync(string task, string taskDescription, System.Guid userId, int status) {
            this.SaveTaskAsync(task, taskDescription, userId, status, null);
        }
        
        /// <remarks/>
        public void SaveTaskAsync(string task, string taskDescription, System.Guid userId, int status, object userState) {
            if ((this.SaveTaskOperationCompleted == null)) {
                this.SaveTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveTaskOperationCompleted);
            }
            this.InvokeAsync("SaveTask", new object[] {
                        task,
                        taskDescription,
                        userId,
                        status}, this.SaveTaskOperationCompleted, userState);
        }
        
        private void OnSaveTaskOperationCompleted(object arg) {
            if ((this.SaveTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveTaskCompleted(this, new SaveTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/UpdateTask", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateTask(int taskID, string task, string taskDescription, System.Guid userId, int status) {
            object[] results = this.Invoke("UpdateTask", new object[] {
                        taskID,
                        task,
                        taskDescription,
                        userId,
                        status});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTaskAsync(int taskID, string task, string taskDescription, System.Guid userId, int status) {
            this.UpdateTaskAsync(taskID, task, taskDescription, userId, status, null);
        }
        
        /// <remarks/>
        public void UpdateTaskAsync(int taskID, string task, string taskDescription, System.Guid userId, int status, object userState) {
            if ((this.UpdateTaskOperationCompleted == null)) {
                this.UpdateTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTaskOperationCompleted);
            }
            this.InvokeAsync("UpdateTask", new object[] {
                        taskID,
                        task,
                        taskDescription,
                        userId,
                        status}, this.UpdateTaskOperationCompleted, userState);
        }
        
        private void OnUpdateTaskOperationCompleted(object arg) {
            if ((this.UpdateTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTaskCompleted(this, new UpdateTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectUserCoachDetails", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectUserCoachDetails(int coachID) {
            object[] results = this.Invoke("SelectUserCoachDetails", new object[] {
                        coachID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectUserCoachDetailsAsync(int coachID) {
            this.SelectUserCoachDetailsAsync(coachID, null);
        }
        
        /// <remarks/>
        public void SelectUserCoachDetailsAsync(int coachID, object userState) {
            if ((this.SelectUserCoachDetailsOperationCompleted == null)) {
                this.SelectUserCoachDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectUserCoachDetailsOperationCompleted);
            }
            this.InvokeAsync("SelectUserCoachDetails", new object[] {
                        coachID}, this.SelectUserCoachDetailsOperationCompleted, userState);
        }
        
        private void OnSelectUserCoachDetailsOperationCompleted(object arg) {
            if ((this.SelectUserCoachDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectUserCoachDetailsCompleted(this, new SelectUserCoachDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/UpdateCoachMobileVersion", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateCoachMobileVersion(int teamID, string firstName, string lastName, string email1, string phone1, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] img, int coachID) {
            object[] results = this.Invoke("UpdateCoachMobileVersion", new object[] {
                        teamID,
                        firstName,
                        lastName,
                        email1,
                        phone1,
                        img,
                        coachID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCoachMobileVersionAsync(int teamID, string firstName, string lastName, string email1, string phone1, byte[] img, int coachID) {
            this.UpdateCoachMobileVersionAsync(teamID, firstName, lastName, email1, phone1, img, coachID, null);
        }
        
        /// <remarks/>
        public void UpdateCoachMobileVersionAsync(int teamID, string firstName, string lastName, string email1, string phone1, byte[] img, int coachID, object userState) {
            if ((this.UpdateCoachMobileVersionOperationCompleted == null)) {
                this.UpdateCoachMobileVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCoachMobileVersionOperationCompleted);
            }
            this.InvokeAsync("UpdateCoachMobileVersion", new object[] {
                        teamID,
                        firstName,
                        lastName,
                        email1,
                        phone1,
                        img,
                        coachID}, this.UpdateCoachMobileVersionOperationCompleted, userState);
        }
        
        private void OnUpdateCoachMobileVersionOperationCompleted(object arg) {
            if ((this.UpdateCoachMobileVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCoachMobileVersionCompleted(this, new UpdateCoachMobileVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/GetAllCoachesTeamsForCombo", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllCoachesTeamsForCombo(int coachID, string season) {
            object[] results = this.Invoke("GetAllCoachesTeamsForCombo", new object[] {
                        coachID,
                        season});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllCoachesTeamsForComboAsync(int coachID, string season) {
            this.GetAllCoachesTeamsForComboAsync(coachID, season, null);
        }
        
        /// <remarks/>
        public void GetAllCoachesTeamsForComboAsync(int coachID, string season, object userState) {
            if ((this.GetAllCoachesTeamsForComboOperationCompleted == null)) {
                this.GetAllCoachesTeamsForComboOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllCoachesTeamsForComboOperationCompleted);
            }
            this.InvokeAsync("GetAllCoachesTeamsForCombo", new object[] {
                        coachID,
                        season}, this.GetAllCoachesTeamsForComboOperationCompleted, userState);
        }
        
        private void OnGetAllCoachesTeamsForComboOperationCompleted(object arg) {
            if ((this.GetAllCoachesTeamsForComboCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllCoachesTeamsForComboCompleted(this, new GetAllCoachesTeamsForComboCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/UpdateCoachActiveTeam", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateCoachActiveTeam(int teamID, int coachID) {
            object[] results = this.Invoke("UpdateCoachActiveTeam", new object[] {
                        teamID,
                        coachID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCoachActiveTeamAsync(int teamID, int coachID) {
            this.UpdateCoachActiveTeamAsync(teamID, coachID, null);
        }
        
        /// <remarks/>
        public void UpdateCoachActiveTeamAsync(int teamID, int coachID, object userState) {
            if ((this.UpdateCoachActiveTeamOperationCompleted == null)) {
                this.UpdateCoachActiveTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCoachActiveTeamOperationCompleted);
            }
            this.InvokeAsync("UpdateCoachActiveTeam", new object[] {
                        teamID,
                        coachID}, this.UpdateCoachActiveTeamOperationCompleted, userState);
        }
        
        private void OnUpdateCoachActiveTeamOperationCompleted(object arg) {
            if ((this.UpdateCoachActiveTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCoachActiveTeamCompleted(this, new UpdateCoachActiveTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/GetSingleEventDetails", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSingleEventDetails(int eventID) {
            object[] results = this.Invoke("GetSingleEventDetails", new object[] {
                        eventID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSingleEventDetailsAsync(int eventID) {
            this.GetSingleEventDetailsAsync(eventID, null);
        }
        
        /// <remarks/>
        public void GetSingleEventDetailsAsync(int eventID, object userState) {
            if ((this.GetSingleEventDetailsOperationCompleted == null)) {
                this.GetSingleEventDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSingleEventDetailsOperationCompleted);
            }
            this.InvokeAsync("GetSingleEventDetails", new object[] {
                        eventID}, this.GetSingleEventDetailsOperationCompleted, userState);
        }
        
        private void OnGetSingleEventDetailsOperationCompleted(object arg) {
            if ((this.GetSingleEventDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSingleEventDetailsCompleted(this, new GetSingleEventDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/GetAllPracticeDrills", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PracticeDrills[] GetAllPracticeDrills(int practiceListingID) {
            object[] results = this.Invoke("GetAllPracticeDrills", new object[] {
                        practiceListingID});
            return ((PracticeDrills[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllPracticeDrillsAsync(int practiceListingID) {
            this.GetAllPracticeDrillsAsync(practiceListingID, null);
        }
        
        /// <remarks/>
        public void GetAllPracticeDrillsAsync(int practiceListingID, object userState) {
            if ((this.GetAllPracticeDrillsOperationCompleted == null)) {
                this.GetAllPracticeDrillsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllPracticeDrillsOperationCompleted);
            }
            this.InvokeAsync("GetAllPracticeDrills", new object[] {
                        practiceListingID}, this.GetAllPracticeDrillsOperationCompleted, userState);
        }
        
        private void OnGetAllPracticeDrillsOperationCompleted(object arg) {
            if ((this.GetAllPracticeDrillsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllPracticeDrillsCompleted(this, new GetAllPracticeDrillsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/GetAllPracticeDrillsAsDs", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllPracticeDrillsAsDs(int practiceListingID) {
            object[] results = this.Invoke("GetAllPracticeDrillsAsDs", new object[] {
                        practiceListingID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllPracticeDrillsAsDsAsync(int practiceListingID) {
            this.GetAllPracticeDrillsAsDsAsync(practiceListingID, null);
        }
        
        /// <remarks/>
        public void GetAllPracticeDrillsAsDsAsync(int practiceListingID, object userState) {
            if ((this.GetAllPracticeDrillsAsDsOperationCompleted == null)) {
                this.GetAllPracticeDrillsAsDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllPracticeDrillsAsDsOperationCompleted);
            }
            this.InvokeAsync("GetAllPracticeDrillsAsDs", new object[] {
                        practiceListingID}, this.GetAllPracticeDrillsAsDsOperationCompleted, userState);
        }
        
        private void OnGetAllPracticeDrillsAsDsOperationCompleted(object arg) {
            if ((this.GetAllPracticeDrillsAsDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllPracticeDrillsAsDsCompleted(this, new GetAllPracticeDrillsAsDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/GetQuadrantsForPracticeBlock", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetQuadrantsForPracticeBlock(int practiceListingID, int blockIndex) {
            object[] results = this.Invoke("GetQuadrantsForPracticeBlock", new object[] {
                        practiceListingID,
                        blockIndex});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetQuadrantsForPracticeBlockAsync(int practiceListingID, int blockIndex) {
            this.GetQuadrantsForPracticeBlockAsync(practiceListingID, blockIndex, null);
        }
        
        /// <remarks/>
        public void GetQuadrantsForPracticeBlockAsync(int practiceListingID, int blockIndex, object userState) {
            if ((this.GetQuadrantsForPracticeBlockOperationCompleted == null)) {
                this.GetQuadrantsForPracticeBlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuadrantsForPracticeBlockOperationCompleted);
            }
            this.InvokeAsync("GetQuadrantsForPracticeBlock", new object[] {
                        practiceListingID,
                        blockIndex}, this.GetQuadrantsForPracticeBlockOperationCompleted, userState);
        }
        
        private void OnGetQuadrantsForPracticeBlockOperationCompleted(object arg) {
            if ((this.GetQuadrantsForPracticeBlockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuadrantsForPracticeBlockCompleted(this, new GetQuadrantsForPracticeBlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/GetAssistantCoachModName", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAssistantCoachModName(int assistantCoachID) {
            object[] results = this.Invoke("GetAssistantCoachModName", new object[] {
                        assistantCoachID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssistantCoachModNameAsync(int assistantCoachID) {
            this.GetAssistantCoachModNameAsync(assistantCoachID, null);
        }
        
        /// <remarks/>
        public void GetAssistantCoachModNameAsync(int assistantCoachID, object userState) {
            if ((this.GetAssistantCoachModNameOperationCompleted == null)) {
                this.GetAssistantCoachModNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssistantCoachModNameOperationCompleted);
            }
            this.InvokeAsync("GetAssistantCoachModName", new object[] {
                        assistantCoachID}, this.GetAssistantCoachModNameOperationCompleted, userState);
        }
        
        private void OnGetAssistantCoachModNameOperationCompleted(object arg) {
            if ((this.GetAssistantCoachModNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssistantCoachModNameCompleted(this, new GetAssistantCoachModNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectSingleDrillDetailsForIos", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectSingleDrillDetailsForIos(int pkid) {
            object[] results = this.Invoke("SelectSingleDrillDetailsForIos", new object[] {
                        pkid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectSingleDrillDetailsForIosAsync(int pkid) {
            this.SelectSingleDrillDetailsForIosAsync(pkid, null);
        }
        
        /// <remarks/>
        public void SelectSingleDrillDetailsForIosAsync(int pkid, object userState) {
            if ((this.SelectSingleDrillDetailsForIosOperationCompleted == null)) {
                this.SelectSingleDrillDetailsForIosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectSingleDrillDetailsForIosOperationCompleted);
            }
            this.InvokeAsync("SelectSingleDrillDetailsForIos", new object[] {
                        pkid}, this.SelectSingleDrillDetailsForIosOperationCompleted, userState);
        }
        
        private void OnSelectSingleDrillDetailsForIosOperationCompleted(object arg) {
            if ((this.SelectSingleDrillDetailsForIosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectSingleDrillDetailsForIosCompleted(this, new SelectSingleDrillDetailsForIosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectAllDrillsForAgeLevelMin", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectAllDrillsForAgeLevelMin(int ageLevelID) {
            object[] results = this.Invoke("SelectAllDrillsForAgeLevelMin", new object[] {
                        ageLevelID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllDrillsForAgeLevelMinAsync(int ageLevelID) {
            this.SelectAllDrillsForAgeLevelMinAsync(ageLevelID, null);
        }
        
        /// <remarks/>
        public void SelectAllDrillsForAgeLevelMinAsync(int ageLevelID, object userState) {
            if ((this.SelectAllDrillsForAgeLevelMinOperationCompleted == null)) {
                this.SelectAllDrillsForAgeLevelMinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllDrillsForAgeLevelMinOperationCompleted);
            }
            this.InvokeAsync("SelectAllDrillsForAgeLevelMin", new object[] {
                        ageLevelID}, this.SelectAllDrillsForAgeLevelMinOperationCompleted, userState);
        }
        
        private void OnSelectAllDrillsForAgeLevelMinOperationCompleted(object arg) {
            if ((this.SelectAllDrillsForAgeLevelMinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllDrillsForAgeLevelMinCompleted(this, new SelectAllDrillsForAgeLevelMinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/GetDrillsForComboByCategoryAndIceTypeAndAgeLe" +
            "vel", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDrillsForComboByCategoryAndIceTypeAndAgeLevel(int drillCategoryID, int iceType, int ageLevelID) {
            object[] results = this.Invoke("GetDrillsForComboByCategoryAndIceTypeAndAgeLevel", new object[] {
                        drillCategoryID,
                        iceType,
                        ageLevelID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDrillsForComboByCategoryAndIceTypeAndAgeLevelAsync(int drillCategoryID, int iceType, int ageLevelID) {
            this.GetDrillsForComboByCategoryAndIceTypeAndAgeLevelAsync(drillCategoryID, iceType, ageLevelID, null);
        }
        
        /// <remarks/>
        public void GetDrillsForComboByCategoryAndIceTypeAndAgeLevelAsync(int drillCategoryID, int iceType, int ageLevelID, object userState) {
            if ((this.GetDrillsForComboByCategoryAndIceTypeAndAgeLevelOperationCompleted == null)) {
                this.GetDrillsForComboByCategoryAndIceTypeAndAgeLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDrillsForComboByCategoryAndIceTypeAndAgeLevelOperationCompleted);
            }
            this.InvokeAsync("GetDrillsForComboByCategoryAndIceTypeAndAgeLevel", new object[] {
                        drillCategoryID,
                        iceType,
                        ageLevelID}, this.GetDrillsForComboByCategoryAndIceTypeAndAgeLevelOperationCompleted, userState);
        }
        
        private void OnGetDrillsForComboByCategoryAndIceTypeAndAgeLevelOperationCompleted(object arg) {
            if ((this.GetDrillsForComboByCategoryAndIceTypeAndAgeLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDrillsForComboByCategoryAndIceTypeAndAgeLevelCompleted(this, new GetDrillsForComboByCategoryAndIceTypeAndAgeLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/GetDrillsForComboByCategoryAndAgeLevel", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDrillsForComboByCategoryAndAgeLevel(int drillCategoryID, int ageLevelID) {
            object[] results = this.Invoke("GetDrillsForComboByCategoryAndAgeLevel", new object[] {
                        drillCategoryID,
                        ageLevelID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDrillsForComboByCategoryAndAgeLevelAsync(int drillCategoryID, int ageLevelID) {
            this.GetDrillsForComboByCategoryAndAgeLevelAsync(drillCategoryID, ageLevelID, null);
        }
        
        /// <remarks/>
        public void GetDrillsForComboByCategoryAndAgeLevelAsync(int drillCategoryID, int ageLevelID, object userState) {
            if ((this.GetDrillsForComboByCategoryAndAgeLevelOperationCompleted == null)) {
                this.GetDrillsForComboByCategoryAndAgeLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDrillsForComboByCategoryAndAgeLevelOperationCompleted);
            }
            this.InvokeAsync("GetDrillsForComboByCategoryAndAgeLevel", new object[] {
                        drillCategoryID,
                        ageLevelID}, this.GetDrillsForComboByCategoryAndAgeLevelOperationCompleted, userState);
        }
        
        private void OnGetDrillsForComboByCategoryAndAgeLevelOperationCompleted(object arg) {
            if ((this.GetDrillsForComboByCategoryAndAgeLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDrillsForComboByCategoryAndAgeLevelCompleted(this, new GetDrillsForComboByCategoryAndAgeLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectUserManagerDetails", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectUserManagerDetails(int coachID) {
            object[] results = this.Invoke("SelectUserManagerDetails", new object[] {
                        coachID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectUserManagerDetailsAsync(int coachID) {
            this.SelectUserManagerDetailsAsync(coachID, null);
        }
        
        /// <remarks/>
        public void SelectUserManagerDetailsAsync(int coachID, object userState) {
            if ((this.SelectUserManagerDetailsOperationCompleted == null)) {
                this.SelectUserManagerDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectUserManagerDetailsOperationCompleted);
            }
            this.InvokeAsync("SelectUserManagerDetails", new object[] {
                        coachID}, this.SelectUserManagerDetailsOperationCompleted, userState);
        }
        
        private void OnSelectUserManagerDetailsOperationCompleted(object arg) {
            if ((this.SelectUserManagerDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectUserManagerDetailsCompleted(this, new SelectUserManagerDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectUserManager", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectUserManager(string userName, string passWord) {
            object[] results = this.Invoke("SelectUserManager", new object[] {
                        userName,
                        passWord});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectUserManagerAsync(string userName, string passWord) {
            this.SelectUserManagerAsync(userName, passWord, null);
        }
        
        /// <remarks/>
        public void SelectUserManagerAsync(string userName, string passWord, object userState) {
            if ((this.SelectUserManagerOperationCompleted == null)) {
                this.SelectUserManagerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectUserManagerOperationCompleted);
            }
            this.InvokeAsync("SelectUserManager", new object[] {
                        userName,
                        passWord}, this.SelectUserManagerOperationCompleted, userState);
        }
        
        private void OnSelectUserManagerOperationCompleted(object arg) {
            if ((this.SelectUserManagerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectUserManagerCompleted(this, new SelectUserManagerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/UpdateManagerMobileVersion", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateManagerMobileVersion(int teamID, string firstName, string lastName, string email1, string phone1, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] img, int coachID) {
            object[] results = this.Invoke("UpdateManagerMobileVersion", new object[] {
                        teamID,
                        firstName,
                        lastName,
                        email1,
                        phone1,
                        img,
                        coachID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateManagerMobileVersionAsync(int teamID, string firstName, string lastName, string email1, string phone1, byte[] img, int coachID) {
            this.UpdateManagerMobileVersionAsync(teamID, firstName, lastName, email1, phone1, img, coachID, null);
        }
        
        /// <remarks/>
        public void UpdateManagerMobileVersionAsync(int teamID, string firstName, string lastName, string email1, string phone1, byte[] img, int coachID, object userState) {
            if ((this.UpdateManagerMobileVersionOperationCompleted == null)) {
                this.UpdateManagerMobileVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateManagerMobileVersionOperationCompleted);
            }
            this.InvokeAsync("UpdateManagerMobileVersion", new object[] {
                        teamID,
                        firstName,
                        lastName,
                        email1,
                        phone1,
                        img,
                        coachID}, this.UpdateManagerMobileVersionOperationCompleted, userState);
        }
        
        private void OnUpdateManagerMobileVersionOperationCompleted(object arg) {
            if ((this.UpdateManagerMobileVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateManagerMobileVersionCompleted(this, new UpdateManagerMobileVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectUserAssistantCoachDetails", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectUserAssistantCoachDetails(int coachID) {
            object[] results = this.Invoke("SelectUserAssistantCoachDetails", new object[] {
                        coachID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectUserAssistantCoachDetailsAsync(int coachID) {
            this.SelectUserAssistantCoachDetailsAsync(coachID, null);
        }
        
        /// <remarks/>
        public void SelectUserAssistantCoachDetailsAsync(int coachID, object userState) {
            if ((this.SelectUserAssistantCoachDetailsOperationCompleted == null)) {
                this.SelectUserAssistantCoachDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectUserAssistantCoachDetailsOperationCompleted);
            }
            this.InvokeAsync("SelectUserAssistantCoachDetails", new object[] {
                        coachID}, this.SelectUserAssistantCoachDetailsOperationCompleted, userState);
        }
        
        private void OnSelectUserAssistantCoachDetailsOperationCompleted(object arg) {
            if ((this.SelectUserAssistantCoachDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectUserAssistantCoachDetailsCompleted(this, new SelectUserAssistantCoachDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/SelectUserAssistantCoach", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectUserAssistantCoach(string userName, string passWord) {
            object[] results = this.Invoke("SelectUserAssistantCoach", new object[] {
                        userName,
                        passWord});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectUserAssistantCoachAsync(string userName, string passWord) {
            this.SelectUserAssistantCoachAsync(userName, passWord, null);
        }
        
        /// <remarks/>
        public void SelectUserAssistantCoachAsync(string userName, string passWord, object userState) {
            if ((this.SelectUserAssistantCoachOperationCompleted == null)) {
                this.SelectUserAssistantCoachOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectUserAssistantCoachOperationCompleted);
            }
            this.InvokeAsync("SelectUserAssistantCoach", new object[] {
                        userName,
                        passWord}, this.SelectUserAssistantCoachOperationCompleted, userState);
        }
        
        private void OnSelectUserAssistantCoachOperationCompleted(object arg) {
            if ((this.SelectUserAssistantCoachCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectUserAssistantCoachCompleted(this, new SelectUserAssistantCoachCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/UpdateAssistantCoachMobileVersion", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateAssistantCoachMobileVersion(int teamID, string firstName, string lastName, string email1, string phone1, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] img, int coachID) {
            object[] results = this.Invoke("UpdateAssistantCoachMobileVersion", new object[] {
                        teamID,
                        firstName,
                        lastName,
                        email1,
                        phone1,
                        img,
                        coachID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAssistantCoachMobileVersionAsync(int teamID, string firstName, string lastName, string email1, string phone1, byte[] img, int coachID) {
            this.UpdateAssistantCoachMobileVersionAsync(teamID, firstName, lastName, email1, phone1, img, coachID, null);
        }
        
        /// <remarks/>
        public void UpdateAssistantCoachMobileVersionAsync(int teamID, string firstName, string lastName, string email1, string phone1, byte[] img, int coachID, object userState) {
            if ((this.UpdateAssistantCoachMobileVersionOperationCompleted == null)) {
                this.UpdateAssistantCoachMobileVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAssistantCoachMobileVersionOperationCompleted);
            }
            this.InvokeAsync("UpdateAssistantCoachMobileVersion", new object[] {
                        teamID,
                        firstName,
                        lastName,
                        email1,
                        phone1,
                        img,
                        coachID}, this.UpdateAssistantCoachMobileVersionOperationCompleted, userState);
        }
        
        private void OnUpdateAssistantCoachMobileVersionOperationCompleted(object arg) {
            if ((this.UpdateAssistantCoachMobileVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAssistantCoachMobileVersionCompleted(this, new UpdateAssistantCoachMobileVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thedrillbook.com/webserv/GetAllDrillCategoriesDS", RequestNamespace="http://www.thedrillbook.com/webserv/", ResponseNamespace="http://www.thedrillbook.com/webserv/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllDrillCategoriesDS() {
            object[] results = this.Invoke("GetAllDrillCategoriesDS", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllDrillCategoriesDSAsync() {
            this.GetAllDrillCategoriesDSAsync(null);
        }
        
        /// <remarks/>
        public void GetAllDrillCategoriesDSAsync(object userState) {
            if ((this.GetAllDrillCategoriesDSOperationCompleted == null)) {
                this.GetAllDrillCategoriesDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllDrillCategoriesDSOperationCompleted);
            }
            this.InvokeAsync("GetAllDrillCategoriesDS", new object[0], this.GetAllDrillCategoriesDSOperationCompleted, userState);
        }
        
        private void OnGetAllDrillCategoriesDSOperationCompleted(object arg) {
            if ((this.GetAllDrillCategoriesDSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllDrillCategoriesDSCompleted(this, new GetAllDrillCategoriesDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.thedrillbook.com/webserv/")]
    public partial class TeamEventLocations {
        
        private int teamEventLocationIDField;
        
        private string locationNameField;
        
        private string address1Field;
        
        private string address2Field;
        
        private string cityField;
        
        private string provStateField;
        
        private string zipPostalField;
        
        private string phoneNumber1Field;
        
        private string phoneNumber2Field;
        
        private string notesField;
        
        private int statusField;
        
        private int typeField;
        
        private int teamIDField;
        
        /// <remarks/>
        public int TeamEventLocationID {
            get {
                return this.teamEventLocationIDField;
            }
            set {
                this.teamEventLocationIDField = value;
            }
        }
        
        /// <remarks/>
        public string LocationName {
            get {
                return this.locationNameField;
            }
            set {
                this.locationNameField = value;
            }
        }
        
        /// <remarks/>
        public string Address1 {
            get {
                return this.address1Field;
            }
            set {
                this.address1Field = value;
            }
        }
        
        /// <remarks/>
        public string Address2 {
            get {
                return this.address2Field;
            }
            set {
                this.address2Field = value;
            }
        }
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string ProvState {
            get {
                return this.provStateField;
            }
            set {
                this.provStateField = value;
            }
        }
        
        /// <remarks/>
        public string ZipPostal {
            get {
                return this.zipPostalField;
            }
            set {
                this.zipPostalField = value;
            }
        }
        
        /// <remarks/>
        public string PhoneNumber1 {
            get {
                return this.phoneNumber1Field;
            }
            set {
                this.phoneNumber1Field = value;
            }
        }
        
        /// <remarks/>
        public string PhoneNumber2 {
            get {
                return this.phoneNumber2Field;
            }
            set {
                this.phoneNumber2Field = value;
            }
        }
        
        /// <remarks/>
        public string Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
        
        /// <remarks/>
        public int Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public int Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int TeamID {
            get {
                return this.teamIDField;
            }
            set {
                this.teamIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.thedrillbook.com/webserv/")]
    public partial class PracticeDrills {
        
        private int practiceDrillsIDField;
        
        private int practiceListingIDField;
        
        private int drillIDField;
        
        private string descriptionField;
        
        private string notesField;
        
        private int drillDurationField;
        
        private int statusField;
        
        private System.DateTime dateCreatedField;
        
        private int blockIndexField;
        
        private int quad1Field;
        
        private int quad2Field;
        
        private int quad3Field;
        
        private int quad4Field;
        
        private int quad5Field;
        
        private int quad6Field;
        
        private int quad7Field;
        
        private int quad8Field;
        
        private int assistantCoachID1Field;
        
        private int assistantCoachID2Field;
        
        private int assistantCoachID3Field;
        
        /// <remarks/>
        public int PracticeDrillsID {
            get {
                return this.practiceDrillsIDField;
            }
            set {
                this.practiceDrillsIDField = value;
            }
        }
        
        /// <remarks/>
        public int PracticeListingID {
            get {
                return this.practiceListingIDField;
            }
            set {
                this.practiceListingIDField = value;
            }
        }
        
        /// <remarks/>
        public int DrillID {
            get {
                return this.drillIDField;
            }
            set {
                this.drillIDField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
        
        /// <remarks/>
        public int DrillDuration {
            get {
                return this.drillDurationField;
            }
            set {
                this.drillDurationField = value;
            }
        }
        
        /// <remarks/>
        public int Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        public int BlockIndex {
            get {
                return this.blockIndexField;
            }
            set {
                this.blockIndexField = value;
            }
        }
        
        /// <remarks/>
        public int Quad1 {
            get {
                return this.quad1Field;
            }
            set {
                this.quad1Field = value;
            }
        }
        
        /// <remarks/>
        public int Quad2 {
            get {
                return this.quad2Field;
            }
            set {
                this.quad2Field = value;
            }
        }
        
        /// <remarks/>
        public int Quad3 {
            get {
                return this.quad3Field;
            }
            set {
                this.quad3Field = value;
            }
        }
        
        /// <remarks/>
        public int Quad4 {
            get {
                return this.quad4Field;
            }
            set {
                this.quad4Field = value;
            }
        }
        
        /// <remarks/>
        public int Quad5 {
            get {
                return this.quad5Field;
            }
            set {
                this.quad5Field = value;
            }
        }
        
        /// <remarks/>
        public int Quad6 {
            get {
                return this.quad6Field;
            }
            set {
                this.quad6Field = value;
            }
        }
        
        /// <remarks/>
        public int Quad7 {
            get {
                return this.quad7Field;
            }
            set {
                this.quad7Field = value;
            }
        }
        
        /// <remarks/>
        public int Quad8 {
            get {
                return this.quad8Field;
            }
            set {
                this.quad8Field = value;
            }
        }
        
        /// <remarks/>
        public int AssistantCoachID1 {
            get {
                return this.assistantCoachID1Field;
            }
            set {
                this.assistantCoachID1Field = value;
            }
        }
        
        /// <remarks/>
        public int AssistantCoachID2 {
            get {
                return this.assistantCoachID2Field;
            }
            set {
                this.assistantCoachID2Field = value;
            }
        }
        
        /// <remarks/>
        public int AssistantCoachID3 {
            get {
                return this.assistantCoachID3Field;
            }
            set {
                this.assistantCoachID3Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.thedrillbook.com/webserv/")]
    public partial class TeamEvent {
        
        private int idField;
        
        private string textField;
        
        private System.DateTime start_dateField;
        
        private System.DateTime end_dateField;
        
        private string eventTypeField;
        
        private int teamIDField;
        
        private int durationField;
        
        private string locationField;
        
        private string addressField;
        
        private int statusField;
        
        private string notesField;
        
        private System.DateTime dateCreatedField;
        
        private int typeField;
        
        private string favoriteTextField;
        
        private int teamOpponentIDField;
        
        private int teamEventLocationIDField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime start_date {
            get {
                return this.start_dateField;
            }
            set {
                this.start_dateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime end_date {
            get {
                return this.end_dateField;
            }
            set {
                this.end_dateField = value;
            }
        }
        
        /// <remarks/>
        public string EventType {
            get {
                return this.eventTypeField;
            }
            set {
                this.eventTypeField = value;
            }
        }
        
        /// <remarks/>
        public int TeamID {
            get {
                return this.teamIDField;
            }
            set {
                this.teamIDField = value;
            }
        }
        
        /// <remarks/>
        public int Duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public string Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        public int Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        public int Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string FavoriteText {
            get {
                return this.favoriteTextField;
            }
            set {
                this.favoriteTextField = value;
            }
        }
        
        /// <remarks/>
        public int TeamOpponentID {
            get {
                return this.teamOpponentIDField;
            }
            set {
                this.teamOpponentIDField = value;
            }
        }
        
        /// <remarks/>
        public int TeamEventLocationID {
            get {
                return this.teamEventLocationIDField;
            }
            set {
                this.teamEventLocationIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.thedrillbook.com/webserv/")]
    public partial class TeamOpponents {
        
        private int teamOpponentIDField;
        
        private string opponentNameField;
        
        private string notesField;
        
        private System.DateTime dateAddedField;
        
        private int statusField;
        
        private int typeField;
        
        private int teamIDField;
        
        /// <remarks/>
        public int TeamOpponentID {
            get {
                return this.teamOpponentIDField;
            }
            set {
                this.teamOpponentIDField = value;
            }
        }
        
        /// <remarks/>
        public string OpponentName {
            get {
                return this.opponentNameField;
            }
            set {
                this.opponentNameField = value;
            }
        }
        
        /// <remarks/>
        public string Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateAdded {
            get {
                return this.dateAddedField;
            }
            set {
                this.dateAddedField = value;
            }
        }
        
        /// <remarks/>
        public int Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public int Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int TeamID {
            get {
                return this.teamIDField;
            }
            set {
                this.teamIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ValidateCredsCompletedEventHandler(object sender, ValidateCredsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateCredsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateCredsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ValidateLoggedInUserCompletedEventHandler(object sender, ValidateLoggedInUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateLoggedInUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateLoggedInUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GrabCoachGUIDCompletedEventHandler(object sender, GrabCoachGUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GrabCoachGUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GrabCoachGUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectAllAssistantCoachesForTeamCompletedEventHandler(object sender, SelectAllAssistantCoachesForTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllAssistantCoachesForTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllAssistantCoachesForTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectAllTeamsForCoachCompletedEventHandler(object sender, SelectAllTeamsForCoachCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllTeamsForCoachCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllTeamsForCoachCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectAllEventsForTeamCompletedEventHandler(object sender, SelectAllEventsForTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllEventsForTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllEventsForTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectTeamDetailCompletedEventHandler(object sender, SelectTeamDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectTeamDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectTeamDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectUserCoachCompletedEventHandler(object sender, SelectUserCoachCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectUserCoachCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectUserCoachCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TeamEventLocationSelectAllForTeamCompletedEventHandler(object sender, TeamEventLocationSelectAllForTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeamEventLocationSelectAllForTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeamEventLocationSelectAllForTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TeamEventLocationSelectSingleCompletedEventHandler(object sender, TeamEventLocationSelectSingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeamEventLocationSelectSingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeamEventLocationSelectSingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TeamEventLocationInsertCompletedEventHandler(object sender, TeamEventLocationInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeamEventLocationInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeamEventLocationInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TeamEventLocationUpdateCompletedEventHandler(object sender, TeamEventLocationUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeamEventLocationUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeamEventLocationUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TeamEventLocationSelectAllForTeamListCompletedEventHandler(object sender, TeamEventLocationSelectAllForTeamListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeamEventLocationSelectAllForTeamListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeamEventLocationSelectAllForTeamListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TeamEventLocations[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TeamEventLocations[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TeamOpponentSelectAllCompletedEventHandler(object sender, TeamOpponentSelectAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeamOpponentSelectAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeamOpponentSelectAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TeamOpponentSelectSingleCompletedEventHandler(object sender, TeamOpponentSelectSingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeamOpponentSelectSingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeamOpponentSelectSingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TeamOpponentInsertCompletedEventHandler(object sender, TeamOpponentInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeamOpponentInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeamOpponentInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TeamOpponentUpdateCompletedEventHandler(object sender, TeamOpponentUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeamOpponentUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeamOpponentUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TeamOpponentSelectAllForTeamCompletedEventHandler(object sender, TeamOpponentSelectAllForTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeamOpponentSelectAllForTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeamOpponentSelectAllForTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TeamOpponents[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TeamOpponents[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetTeamAgeLevelCompletedEventHandler(object sender, GetTeamAgeLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamAgeLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamAgeLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectAllEventsForTeamByTypeCompletedEventHandler(object sender, SelectAllEventsForTeamByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllEventsForTeamByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllEventsForTeamByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectAllEventsForTeamByTypeTodayForwardCompletedEventHandler(object sender, SelectAllEventsForTeamByTypeTodayForwardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllEventsForTeamByTypeTodayForwardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllEventsForTeamByTypeTodayForwardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectAllEventsForTeamByDateForwardCompletedEventHandler(object sender, SelectAllEventsForTeamByDateForwardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllEventsForTeamByDateForwardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllEventsForTeamByDateForwardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectSingleEventDetailCompletedEventHandler(object sender, SelectSingleEventDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectSingleEventDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectSingleEventDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSingleEventInstanceCompletedEventHandler(object sender, GetSingleEventInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSingleEventInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSingleEventInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TeamEvent Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TeamEvent)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertEventCompletedEventHandler(object sender, InsertEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateEventCompletedEventHandler(object sender, UpdateEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void EventUpdateAttendingStatusCompletedEventHandler(object sender, EventUpdateAttendingStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EventUpdateAttendingStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EventUpdateAttendingStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AttendanceSetStatusCompletedEventHandler(object sender, AttendanceSetStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttendanceSetStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AttendanceSetStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AttendanceGetStatusCompletedEventHandler(object sender, AttendanceGetStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttendanceGetStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AttendanceGetStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void EventGetPlayerAttendanceCompletedEventHandler(object sender, EventGetPlayerAttendanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EventGetPlayerAttendanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EventGetPlayerAttendanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectUserPlayerCompletedEventHandler(object sender, SelectUserPlayerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectUserPlayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectUserPlayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectUserPlayerDetailsCompletedEventHandler(object sender, SelectUserPlayerDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectUserPlayerDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectUserPlayerDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectAllPlayersForTeamCompletedEventHandler(object sender, SelectAllPlayersForTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllPlayersForTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllPlayersForTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectPlayerDetailsCompletedEventHandler(object sender, SelectPlayerDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectPlayerDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectPlayerDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectAllPlayersForTeamForListsCompletedEventHandler(object sender, SelectAllPlayersForTeamForListsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllPlayersForTeamForListsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllPlayersForTeamForListsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectAllPlayersForTeamForListsWithImageCompletedEventHandler(object sender, SelectAllPlayersForTeamForListsWithImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllPlayersForTeamForListsWithImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllPlayersForTeamForListsWithImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SaveNewPlayerCompletedEventHandler(object sender, SaveNewPlayerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveNewPlayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveNewPlayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdatePlayerCompletedEventHandler(object sender, UpdatePlayerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePlayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePlayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdatePlayerMobileVersionCompletedEventHandler(object sender, UpdatePlayerMobileVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePlayerMobileVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePlayerMobileVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectAllTasksForUserCompletedEventHandler(object sender, SelectAllTasksForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllTasksForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllTasksForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectTaskDetailsCompletedEventHandler(object sender, SelectTaskDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectTaskDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectTaskDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SaveTaskCompletedEventHandler(object sender, SaveTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateTaskCompletedEventHandler(object sender, UpdateTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectUserCoachDetailsCompletedEventHandler(object sender, SelectUserCoachDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectUserCoachDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectUserCoachDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateCoachMobileVersionCompletedEventHandler(object sender, UpdateCoachMobileVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCoachMobileVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCoachMobileVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllCoachesTeamsForComboCompletedEventHandler(object sender, GetAllCoachesTeamsForComboCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllCoachesTeamsForComboCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllCoachesTeamsForComboCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateCoachActiveTeamCompletedEventHandler(object sender, UpdateCoachActiveTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCoachActiveTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCoachActiveTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSingleEventDetailsCompletedEventHandler(object sender, GetSingleEventDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSingleEventDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSingleEventDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllPracticeDrillsCompletedEventHandler(object sender, GetAllPracticeDrillsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllPracticeDrillsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllPracticeDrillsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PracticeDrills[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PracticeDrills[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllPracticeDrillsAsDsCompletedEventHandler(object sender, GetAllPracticeDrillsAsDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllPracticeDrillsAsDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllPracticeDrillsAsDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetQuadrantsForPracticeBlockCompletedEventHandler(object sender, GetQuadrantsForPracticeBlockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuadrantsForPracticeBlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQuadrantsForPracticeBlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAssistantCoachModNameCompletedEventHandler(object sender, GetAssistantCoachModNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssistantCoachModNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssistantCoachModNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectSingleDrillDetailsForIosCompletedEventHandler(object sender, SelectSingleDrillDetailsForIosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectSingleDrillDetailsForIosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectSingleDrillDetailsForIosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectAllDrillsForAgeLevelMinCompletedEventHandler(object sender, SelectAllDrillsForAgeLevelMinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllDrillsForAgeLevelMinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllDrillsForAgeLevelMinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDrillsForComboByCategoryAndIceTypeAndAgeLevelCompletedEventHandler(object sender, GetDrillsForComboByCategoryAndIceTypeAndAgeLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDrillsForComboByCategoryAndIceTypeAndAgeLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDrillsForComboByCategoryAndIceTypeAndAgeLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDrillsForComboByCategoryAndAgeLevelCompletedEventHandler(object sender, GetDrillsForComboByCategoryAndAgeLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDrillsForComboByCategoryAndAgeLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDrillsForComboByCategoryAndAgeLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectUserManagerDetailsCompletedEventHandler(object sender, SelectUserManagerDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectUserManagerDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectUserManagerDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectUserManagerCompletedEventHandler(object sender, SelectUserManagerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectUserManagerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectUserManagerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateManagerMobileVersionCompletedEventHandler(object sender, UpdateManagerMobileVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateManagerMobileVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateManagerMobileVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectUserAssistantCoachDetailsCompletedEventHandler(object sender, SelectUserAssistantCoachDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectUserAssistantCoachDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectUserAssistantCoachDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectUserAssistantCoachCompletedEventHandler(object sender, SelectUserAssistantCoachCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectUserAssistantCoachCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectUserAssistantCoachCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateAssistantCoachMobileVersionCompletedEventHandler(object sender, UpdateAssistantCoachMobileVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateAssistantCoachMobileVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateAssistantCoachMobileVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllDrillCategoriesDSCompletedEventHandler(object sender, GetAllDrillCategoriesDSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllDrillCategoriesDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllDrillCategoriesDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591